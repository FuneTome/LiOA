#include <iostream>
using namespace std;
struct Node {
	int data;
	Node* left;
	Node* right;
};
Node* root;
Node* CreateTree(Node* root, Node* r, int data){
	if (r == NULL){
		r = (struct Node*)malloc(sizeof(struct Node));
		if (r == NULL){
			printf("Ошибка выделения памяти");
			exit(0);
		}
		r->left = NULL;
		r->right = NULL;
		r->data = data;
		if (root == NULL) return r;

		//if (data == root->data) return r;
		if (data > root->data) root->left = r;
		else root->right = r;
		return r;
	}
	//if (data == root->data) return root;
	if (data > r->data) CreateTree(r, r->left, data);
	else CreateTree(r, r->right, data);
	return root;
}

	void print_tree(struct Node* r, int l){
	if (r == NULL){
		return;
	}
	print_tree(r->right, l + 1);
	for (int i = 0; i < l; i++){
		printf(" ");
	}
	printf("%d\n", r->data);
	print_tree(r->left, l + 1);
	}

	int search_data(struct Node* r, int n) {
		if (r == NULL) {
			return 1;
		}
		if (r->data == n) { cout << "Элемент найден\n"; exit(0); }
		search_data(r->left, n);
		search_data(r->right, n);
	}
	int sum(struct Node* r, int n, int count) {
		if (r == NULL) {
			return count;
		}
		if (r->data == n) count++;
		sum(r->left, n, count);
		sum(r->right, n, count);
	}
int main()
{
	setlocale(LC_ALL, "");
	int D, start = 1;
	root = NULL;
	printf("-1 - окончание построения дерева\n");
	while (start)	{
		printf("Введите число: ");
		scanf_s("%d", &D);
		if (D == -1){
			printf("Построение дерева окончено\n\n");
			start = 0;
		}
		else root = CreateTree(root, root, D);
	}
	print_tree(root, 10);
	int n;
	cout << "Введите значение: ";
	cin >> n;
	//if (int f = search_data(root, n)) cout << "Элемент не найден";
	int c = sum(root, n, 0);
	cout << c;
	return 0;
}